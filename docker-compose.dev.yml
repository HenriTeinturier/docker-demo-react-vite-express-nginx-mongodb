name: myapp-dev
version: "3.9"
services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.env
    volumes:
      - type: bind
        source: ./client
        target: /app
      - type: volume
        target: /app/node_modules
    ports:
      - 5173:5173
  api:
    build:
      context: ./api
      # on aura le même en dev et en prod
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: ./api/src
        target: /app/src
    # le port 80 de la machine hôte va être utilisé par nginx avec le reverse proxy. nginx pourra communiquer directement sur le réseau docket avec api en utilisant le prot 80 du container api. Mais on pourra acccéder depuis notre machine hôte sans passer par nginx à notre container api en utilisant le port 3001.
    ports:
      - 3001:80
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=development
  # mongodb_init:
  #   image: mongo:latest
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=superadmin
  #     - MONGO_INITDB_ROOT_PASSWORD=superpassword
  #   ports:
  #     - 27017:27017
  #   volumes:
  #     - type: volume
  #       source: mongodb_dev_data
  #       target: /data/db
  #     - type: volume
  #       source: mongodb_dev_config
  #       target: /data/configdb
  db:
    image: mongo:latest
    ports:
      - 27017:27017
    volumes:
      - type: volume
        source: mongodb_dev_data
        target: /data/db
      - type: volume
        source: mongodb_dev_config
        target: /data/configdb
  reverse-proxy:
    build:
      context: ./reverse-proxy
      dockerfile: Dockerfile.dev
    ports:
      - 80:80
    depends_on:
      - api
      - db
      - client
volumes:
  mongodb_dev_data:
    external: true
  mongodb_dev_config:
    external: true
